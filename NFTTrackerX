# NFTTrackerX.py

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import requests
from datetime import datetime
from typing import Dict, Any

class NFTTrackerX:
    def __init__(self, api_base_url: str):
        self.api_base_url = api_base_url
        self.data = pd.DataFrame()

    def fetch_nft_data(self, collection_name: str) -> Dict[str, Any]:
        """
        Fetch data for a specific NFT collection.
        """
        url = f"{self.api_base_url}/v1/nft/{collection_name}/data"
        response = requests.get(url)
        return response.json()

    def load_nft_data(self, collection_name: str):
        """
        Load NFT data into the DataFrame.
        """
        nft_data = self.fetch_nft_data(collection_name)
        self.data = pd.json_normalize(nft_data)
        print(f"Data loaded for collection: {collection_name}")

    def analyze_nft(self):
        """
        Analyze NFT data.
        """
        if self.data.empty:
            raise ValueError("Data is not loaded.")
        
        collection_name = self.data['collection_name'].iloc[0]
        total_volume = self.data['total_volume'].iloc[0]
        avg_price = self.data['avg_price'].iloc[0]
        
        print(f"Collection Name: {collection_name}")
        print(f"Total Trading Volume: {total_volume}")
        print(f"Average Price: {avg_price}")

    def plot_nft_data(self):
        """
        Plot NFT data.
        """
        if self.data.empty:
            raise ValueError("Data is not loaded.")
        
        time_series = self.data['timestamp']
        price_series = self.data['price']
        
        plt.figure(figsize=(10, 6))
        plt.plot(time_series, price_series, color='blue', alpha=0.7)
        plt.xlabel('Time')
        plt.ylabel('Price')
        plt.title('Price Over Time')
        plt.grid(True)
        plt.show()

    def generate_report(self) -> Dict[str, Any]:
        """
        Generate a report on the NFT data.
        """
        if self.data.empty:
            raise ValueError("Data is not loaded.")
        
        collection_name = self.data['collection_name'].iloc[0]
        total_volume = self.data['total_volume'].iloc[0]
        avg_price = self.data['avg_price'].iloc[0]
        avg_volume = np.mean(self.data['total_volume'])
        
        report = {
            'collection_name': collection_name,
            'total_volume': total_volume,
            'avg_price': avg_price,
            'average_volume': avg_volume
        }
        
        return report

# Example usage
if __name__ == "__main__":
    api_base_url = 'https://api.example.com'  # Example base URL
    nft_tracker = NFTTrackerX(api_base_url)
    
    # Load data for a specific NFT collection (example collection name: 'CryptoPunks')
    nft_tracker.load_nft_data(collection_name='CryptoPunks')
    
    # Analyze NFT data
    nft_tracker.analyze_nft()
    
    # Plot NFT data
    nft_tracker.plot_nft_data()
    
    # Generate and print a report
    report = nft_tracker.generate_report()
    print("NFT Data Report:")
    for key, value in report.items():
        print(f"{key}: {value}")
